---
title: "Project 1"
author: "Cass Crews"
format: html
editor: visual
---

# Introduction

# Loading in key packages

```{r}
library(tidyverse)
library(httr)
library(jsonlite)
```

# Understanding the Census API

To obtain PUMS data via the Census API, we can take the standard approach of using `httr::GET()` and determining the correct URL structure to obtain the data we want. 

As an example, we may want to obtain educational attainment for survey respondents living in Alabama in 2022. Let's break down the corresponding URL:

> `https://api.census.gov/data/2022/acs/acs1/pums?get=PWGTP,SCHL&for=state:01`

The portion of the URL up to the "`?`" (`https://api.census.gov/data/2022/acs/acs1/pums`) indicates that we want data from the ACS 2022 1-year PUMS file. `get=PWGTP,SCHL` indicates we want the person-level weights, which we will use when generating tabulations to ensure our tabulations are representative of the Alabama population, as well as the educational attainment variable (`SCHL`). `for=state:01` indicates we only want data for Alabama. 

Let's use `GET()` to read in our data and see what we get. 

```{r}
example_data<-GET("https://api.census.gov/data/2022/acs/acs1/pums?get=PWGTP,SCHL&for=state:01")

str(example_data,max.level=1)
```

There is a lot of information returned by the Census API, but what we actually want is the raw, currently uninterpretable information in `example_data$content`. To extract these data in a usable form, we can combine the `rawToChar()` function, which will convert the raw data to human-interpretable data, with the `fromJSON()` function from the `jsonlite` package, which will convert our data to a data frame. As a final step, we can coerce our data to a tibble. This will result in cleaner printing. 

```{r}
example_mat<-fromJSON(rawToChar(example_data$content))

colnames(example_mat)<-example_mat[1,]

example_mat<-example_mat[-1,]

#example_tbl<-as_tibble(example_mat) |>
#  mutate(across(everything(),as.numeric))

example_tbl$PWGTP<-as.numeric(example_tbl$PWGTP)

example_tbl
```

This is still not particularly useful as educational attainment (`SCHL`) is a factor variable; the values have explicit meaning. Similarly, the values of `state` are all `01` rather than `Alabama`. 

Additionally, it would be nice to not need to write out all the code to complete all the post-`GET` processing each time we make an API call. To deal with this issue, let's write a helper function that completes the data processing for us. 

```{r}
content_cleaner<-function(response) {
  mat<-fromJSON(rawToChar(response$content))

  colnames(mat)<-mat[1,]
  
  mat<-mat[-1,]
  
  tbl<-as_tibble(mat)
  
  tbl$PWGTP<-as.numeric(tbl$PWGTP)
  
  return(tbl)
}
```

That should speed up the process. Let's test the function on our original API response to ensure it works.

```{r}
test_tbl<-content_cleaner(example_data)

test_tbl
```

It looks like our function worked!

# A Function to Query Census API and Clean Data

we still face the issue that our data aren't as informative as they could be. Also, it would be nice to be able to change our request and still have the resulting tibble be an informative and useful dataset. 

To solve these current limitations, let's build a comprehensive query function that allows the user to do the following:
- Select the survey year (2010 to 2023, excluding 2020)
- Select from a set of useful numeric variables, and returns    these data in the appropriate type
- Select from a set of useful categorical variables and returns these data as factor variables with appropriate levels
- Specify a geography level (All, Region, Division, or State)
- Optionally subset the data to spectific geographies within the specified         geography level

```{r}
census_get<-function(year=2022,numvar="AGEP",catvar="SEX",geo_level="All") {
  #Building the URL
  #"https://api.census.gov/data/2022/acs/acs1/pums?get=PWGTP,SCHL&for=state:01"
  
  if (geo_level=="All") {
    URL<-paste0("https://api.census.gov/data/",year,"/acs/acs1/pums?get=PWGTP,",paste(numvar,collapse=","),",",paste(catvar,collapse=","))
  } else {
    URL<-paste0("https://api.census.gov/data/",year,"/acs/acs1/pums?get=PWGTP,",paste(numvar,collapse=","),",",paste(catvar,collapse=","),"&for=",geo_level)
  }
  
  response<-GET(URL)
  
  content_cleaner(response)
}

test_response<-census_get()


test<-read_json("https://api.census.gov/data/2023/acs/acs1/pums/variables/SCH.json")

unlist(test$values$item,use.names=FALSE)
```

